# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import sensor_pb2 as sensor__pb2


class SoilSensorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ActivateModule = channel.unary_unary(
                '/SoilSensor/ActivateModule',
                request_serializer=sensor__pb2.ActivateRequest.SerializeToString,
                response_deserializer=sensor__pb2.ActivateResponse.FromString,
                )
        self.CollectSoilSample = channel.unary_unary(
                '/SoilSensor/CollectSoilSample',
                request_serializer=sensor__pb2.CollectRequest.SerializeToString,
                response_deserializer=sensor__pb2.CollectResponse.FromString,
                )
        self.AnalyzeSoilSample = channel.unary_unary(
                '/SoilSensor/AnalyzeSoilSample',
                request_serializer=sensor__pb2.AnalyzeRequest.SerializeToString,
                response_deserializer=sensor__pb2.AnalyzeResponse.FromString,
                )


class SoilSensorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ActivateModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectSoilSample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeSoilSample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SoilSensorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ActivateModule': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateModule,
                    request_deserializer=sensor__pb2.ActivateRequest.FromString,
                    response_serializer=sensor__pb2.ActivateResponse.SerializeToString,
            ),
            'CollectSoilSample': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectSoilSample,
                    request_deserializer=sensor__pb2.CollectRequest.FromString,
                    response_serializer=sensor__pb2.CollectResponse.SerializeToString,
            ),
            'AnalyzeSoilSample': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeSoilSample,
                    request_deserializer=sensor__pb2.AnalyzeRequest.FromString,
                    response_serializer=sensor__pb2.AnalyzeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SoilSensor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SoilSensor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ActivateModule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SoilSensor/ActivateModule',
            sensor__pb2.ActivateRequest.SerializeToString,
            sensor__pb2.ActivateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectSoilSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SoilSensor/CollectSoilSample',
            sensor__pb2.CollectRequest.SerializeToString,
            sensor__pb2.CollectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnalyzeSoilSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SoilSensor/AnalyzeSoilSample',
            sensor__pb2.AnalyzeRequest.SerializeToString,
            sensor__pb2.AnalyzeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
